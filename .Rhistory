# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
#
# svm(Sex~., data = trainset, kernel = "radial", gamma = 1, cost = 10) >> 99.3%
#
#
#
#
#
#
#
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 100) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 10) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 100) >> 98.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 1, cost = 10) >> 99.3%
#
#
#
#
#
#
#
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 10)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 100) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 10) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 100) >> 98.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1) >> 87.2%
#
#
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 0.5)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 100) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 10) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 100) >> 98.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1) >> 87.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 10) >> 97.3%
#
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 1)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 100) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 10) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 100) >> 98.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 0.5) >> 76.7%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1) >> 87.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 10) >> 97.3%
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 1)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 100) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 1) >> 54.5%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 100) >> 98.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 0.5) >> 76.7%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1) >> 87.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 10) >> 97.3%
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 1)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 10)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 1) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 1) >> 65.6%
#
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 0.5) >> 76.7%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1) >> 87.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 10) >> 97.3%
#install.packages('e1071', dependencies = TRUE);
#setwd('C:/CS450')
# Include the LIBSVM package
#library(e1071)
# Load vowel.csv
vowel <- read.csv("vowel.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(vowel)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$Sex
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 1) >> 87.8%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.001, cost = 10) >> 96.9%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5) >> 53.1%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 1) >> 65.6%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 10) >> 92.5%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5) >> 89.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1) >> 91.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10) >> 100%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 0.5) >> 76.7%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 1) >> 87.2%
# svm(Sex~., data = trainset, kernel = "radial", gamma = 0.0006, cost = 10) >> 97.3%
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
# Train an SVM model
model <- svm(Letter~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
# Load letters.csv
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(high~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
# Train an SVM model
model <- svm(High~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(Hig
# Load letters.csv
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(High~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
print(model)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
# The training set contains all the other rows
trainset <- vowel[-testIndex,]
# Train an SVM model
model <- svm(y_box~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
print(model)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- vowel[testIndex,]
print(testset)
print(letters)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
print(testset)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(y_box~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
print(model)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(y_box~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$high
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
# Load letters.csv
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(y_box~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$y_box
accuracy <- prop.table(table(agreement))
# Print our results to the screen
#print(confusionMatrix)
print(accuracy)
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(width~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,2])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$width
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-2])
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(width~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Load letters.csv
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(width~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5)
print(model)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
letters <- read.csv("letters.csv", head = TRUE, sep=",")
# Partition the data into training and test sets
index <- 1:nrow(letters)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- letters[testIndex,]
# The training set contains all the other rows
trainset <- letters[-testIndex,]
# Train an SVM model
model <- svm(width~., data = trainset, kernel = "radial", gamma = 0.001, cost = 0.5)
#print(model)
#summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[,-1])
View(letters)
