dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 1)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.0002, cost = 0.5)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.005, cost = 0.5)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.005, cost = 1)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.005, cost = 10)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
# Load letters.csv
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.5, cost = 10)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 1, cost = 10)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.9, cost = 10)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.5, cost = 10)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.5, cost = 1)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.5, cost = 100)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
dataset <- read.csv("letters.csv", head = TRUE, sep=",", nrows=2500)
# Partition the data into training and test sets
index <- 1:nrow(dataset)
testIndex <- sample(index, trunc(length(index) * 0.3))
# The test set contains all the test rows
testset <- dataset[testIndex,]
# The training set contains all the other rows
trainset <- dataset[-testIndex,]
# Train an SVM model
model <- svm(letter~., data = trainset, kernel = "radial", gamma = 0.5, cost = 0.5)
summary(model)
# Use the model to make a prediction on the test set
prediction <- predict(model, testset[-1])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = testset[,1])
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == testset$letter
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(accuracy)
install.packages('arules');
library(arules);
data(Groceries);
install.packages('arules');
library(arules);
data(Groceries)
data(Groceries)
print(data)
print(Groceries)
library(arules);
data(Groceries)
rules <- apriori(data, parameter = list(supp = 0.6, conf = 0.8))
summary(rules)
data(Groceries)
rules <- apriori(Groceries, parameter = list(supp = 0.6, conf = 0.8))
summary(rules)
data(Groceries)
rules <- apriori(Groceries, parameter = list(supp = 0.6, conf = 0.8))
print(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.006, conf = 0.08))
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.006, conf = 0.08))
summary(rules)
#install.packages('arules');
#library(arules);
# Loading a dataset from the library
data(Groceries)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.008, conf = 0.08))
summary(rules)
#The 5 rules you can find with the highest support
#The 5 rules you can find with the highest confidence
#The 5 rules you can find with the highest lift
#The 5 rules you think are the most interesting
rules <- apriori(Groceries, parameter = list(supp = 0.008, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2, conf = 0.08))
summary(rules)
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.3, conf = 0.08))
summary(rules)
, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1863, conf = 0.08))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.1935, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1863, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2245, conf = 0.08))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.1863, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2090, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2090, conf = 0.0001))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2090, conf = 0))
summary(rules)
data(Groceries)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.2090, conf = 0.001))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.1935, conf = 0.001))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1935, conf = 0.06))
summary(rules)
data(Groceries)
rules <- apriori(Groceries, parameter = list(supp = 0.0001, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.002034, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.002034, conf = 0.2))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.002034, conf = 0.8))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2245, conf = 0.8))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2245, conf = 0.08))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.02, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.02, conf = 0.5))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.02227, conf = 0.5))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.02227, conf = 0.05))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.09, conf = 0.49725))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.09, conf = 0.09))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.006, conf = 0.2))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2245, conf = 0.2))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.06, conf = 0.2))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.06, conf = 0.3117))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.06, conf = 0.03))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.8, conf = 0.2))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.2))
summary(rules)
#install.packages('arules');
#library(arules);
# Loading a dataset from the library
data(Groceries)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.02))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.66))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.008, conf = 0.66))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.02, conf = 0.2))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.02, conf = 0.02))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.008, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.25))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.025))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.17, conf = 0.025))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.017, conf = 0.025))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.17, conf = 0.025))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.17, conf = 0.8857))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.0017, conf = 0.8857))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.0017, conf = 0.8))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.002, conf = 0.8))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.002, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.006, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.06, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.0017, conf = 0.008))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.008))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.0001, conf = 0.008))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.8))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.24, conf = 0.008))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.024, conf = 0.008))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.0024, conf = 0.008))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.22, conf = 0.008))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.0022, conf = 0.008))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.08, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.8, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.08))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.9, conf = 0.08))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.17, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.17, conf = 0))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.02227, conf = 0))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.24, conf = 2.8421))
summary(rules)
data(Groceries)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.24, conf = 2.8421))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.24, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.024, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.024, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.024, conf = 0.6))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.06, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.006, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.008744, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.07, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.18, conf = 0.06))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.2, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.15, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.19, conf = 0.06))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.19, conf = 0.065))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.019, conf = 0.065))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.018, conf = 0.07))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.18, conf = 0.07))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.001))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.0017, conf = 0.008))
summary(rules)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 0.017, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.06, conf = 0.08))
summary(rules)
#install.packages('arules');
#library(arules);
# Loading a dataset from the library
data(Groceries)
# Putting Groceries dataset into an apriori function
rules <- apriori(Groceries, parameter = list(supp = 1, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf = 0.08))
summary(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.08))
summary(rules)
